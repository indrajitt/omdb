{"version":3,"sources":["components/Card/Card.js","components/List/List.js","components/Search/Search.js","utils/constants.js","pages/SearchPage/SearchPage.js","pages/DetailsPage/DetailsPage.js","App.js","serviceWorker.js","index.js"],"names":["Card","React","memo","props","movie","history","useHistory","className","style","width","margin","height","overflow","src","Poster","alt","Title","Year","Type","onClick","push","imdbID","List","elements","component","map","e","element","createElement","key","Search","value","placeholder","type","onChange","target","float","onSubmit","baseUrl","axiosHeaders","headers","SearchPage","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","uri","axios","get","then","res","data","Array","onSubmitSuccess","catch","err","console","error","DetailsPage","params","useParams","Actors","Awards","BoxOffice","Country","DVD","Director","Genre","Language","Metascore","Plot","Production","Rated","Ratings","Released","Response","Runtime","Website","Writer","imdbRating","imdbVotes","details","setDetails","useEffect","response","log","justifyContent","Review","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e13b2fcc.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst Card = React.memo(props => {\n\n  const movie = props.movie;\n  const history = useHistory();\n\n  const viewButtonClick = () => {\n    history.push(`/details/${movie.imdbID}`);\n  }\n  \n  return (\n    <div className=\"col-md-4\">\n      <div className=\"card\" style={{ width: '18rem', margin: 'auto' }}>\n        <div className=\"bd-placeholder-img card-img-top\" style={{ width: '18rem', height: '18rem', overflow: 'hidden' }}>\n          <img src={movie.Poster} style={{ width: '18rem' }} alt=\"Poster\" />\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{movie.Title}</h5>\n          <p className=\"card-text\"> Year : {movie.Year} , Type: {movie.Type} </p>\n          <button className=\"btn btn-primary\" onClick={viewButtonClick}>View</button>\n        </div>\n      </div>\n      <br />\n    </div>\n  )\n})\n\nexport default Card;","import React from 'react';\n\nexport default function List(props) {\n  const elements = props.elements || []; // Array of movies\n  const component = props.component; // Card component\n\n  const createReactElement = (element) => {\n    return React.createElement(component, { movie: element, key: element.imdbID })\n  }\n\n  return (\n    <div className=\"row\">\n      {elements.map(e => createReactElement(e))}\n    </div>\n  )\n}","import React from 'react';\nimport './Search.css';\n\nexport default function Search(props) {\n  const value = props.value;\n  const handleChange = (e) => props.onChange(e.target.value);\n  const handleSubmit = () => props.onSubmit(value);\n\n  return (\n    <>\n    <div className=\"header\">\n      <h1>The Movie Search</h1>\n    </div>\n    <div className = \"bg\">\n      <input className=\"search clear-margin-top\" placeholder=\"Enter movie to search for..\" type=\"text\" value={value} onChange={handleChange} style = {{float : \"right\"}}/>\n      <button className=\"btn btn-success clear-margin-top\" onClick={handleSubmit}>Search</button>\n    </div>\n    </>\n  )\n}","\nconst baseUrl = 'http://indrajitt.xyz:3001/';\nconst axiosHeaders = {\n\theaders: {\n\t  'Access-Control-Allow-Origin': '*',\n\t}\n};\nexport { baseUrl, axiosHeaders }","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport Card from '../../components/Card/Card';\nimport List from '../../components/List/List';\nimport Search from '../../components/Search/Search';\n\nimport { baseUrl, axiosHeaders } from '../../utils/constants';\n\nexport default function SearchPage() {\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResult, setSearchResult] = useState([]);\n\n  const onSubmitSuccess = (res) => {\n    // Data validation before setting searchResult\n    if (res && res.data && res.data.Search instanceof Array) {\n      setSearchResult(res.data.Search);\n    }\n  }\n\n  const onSubmit = (searchTerm) => {\n    const uri = `${baseUrl}omdb/search?title=${searchTerm}`;\n    axios.get(uri, axiosHeaders)\n      .then(res => onSubmitSuccess(res))\n      .catch(err => console.error(err));\n  }\n\n  return (\n    <>\n      <Search value={searchTerm} onChange={setSearchTerm} onSubmit={onSubmit} />\n      <br />\n      <List elements={searchResult} component={Card} />\n      \n    </>\n  )\n}","import React, { useEffect , useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { axiosHeaders,baseUrl } from '../../utils/constants';\nimport { useHistory } from 'react-router-dom';\nimport './DetailsPage';\n\nexport default function DetailsPage() {\n    const params = useParams();\n    const [details,setDetails] = useState({\n        Actors: \"\",\n        Awards: \"\",\n        BoxOffice: \"\",\n        Country: \"\",\n        DVD: \"\",\n        Director: \"\",\n        Genre: \"\",\n        Language: \"\",\n        Metascore: \"\",\n        Plot: \"\",\n        Poster: \"\",\n        Production: \"\",\n        Rated: \"\",\n        Ratings: {},\n        Released: \"\",\n        Response: \"\",\n        Runtime: \"\",\n        Title: \"\",\n        Type: \"\",\n        Website: \"\",\n        Writer: \"\",\n        Year: \"\",\n        imdbID: \"\",\n        imdbRating: \"\",\n        imdbVotes: \"\",\n    });\n    const uri = `${baseUrl}omdb/imdb/${params.imdbID}`;\n    const history = useHistory();\n\n    useEffect( () =>{\n        axios.get(uri,axiosHeaders)\n        .then(response => setDetails(response.data))\n        .catch(err=>console.log(err))\n    },[])\n\n    console.log(details);\n    \n    const backButtonClick = () => {\n      history.push(`/`);\n    } \n\n    return (\n       \n        <div>\n              <div className=\"header\">\n                <h1>The Movie Search</h1>\n              </div>\n              <div className=\"card\" style={{ margin: \"auto\" , justifyContent : \"center\"}}>\n              <div className=\"card-body \">\n                <h5 className=\"card-title\"><u>{details.Title}</u> ({details.Year})</h5>\n                  <div className=\"card\" style={{width: \"18rem\"  , margin : \"auto\"}}>\n                  <img className=\"card-img-top\" src={details.Poster} alt=\"Card image cap\"/>\n                  <div className=\"card-body d-flex justify-content-center\">\n                    <p className=\"card-text\">{details.Title}    ({details.Country})</p>\n                  </div>\n                </div>\n              </div>\n              <ul className=\"list-group list-group-flush justify-content-center\">\n              <li className=\"list-group-item\"><br/><b>Plot:</b><br></br>{details.Plot}</li>\n                <li className=\"list-group-item\"><b>Director:</b><br></br>{details.Director}<br></br><br></br><b>Actors:</b><br></br>{details.Actors}</li>\n                <li className=\"list-group-item\">\n                  <b>Movie Info : </b><br/><br/>\n                  Genre : {details.Genre}<br/>\n                  Runtime : {details.Runtime}<br/>\n                  Released : {details.Released}<br/>\n                  Writer : {details.Writer}<br/>\n                  Type : {details.Type}<br/>\n                  Language : {details.Language}<br/>\n                  Awards : {details.Awards} <br/>\n                  Metascore : {details.Metascore}<br/>\n\n                </li>\n                <li className=\"list-group-item\">\n                <b>Ratings & Reviews : </b><br/><br/>\n                  Rated : {details.Rated}<br/>\n                  Review : {details.Review}<br/>\n                  ImDB Rating : {details.imdbRating}<br/>\n                  ImDB Votes : {details.imdbVotes}<br/>\n\n                </li>\n              </ul>\n              <div className=\"card-body d-flex justify-content-center\">\n                <button className=\"btn btn-success clear-margin-top\" onClick={backButtonClick} >Back to Search</button>              \n              </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport SearchPage from './pages/SearchPage/SearchPage';\nimport DetailsPage from './pages/DetailsPage/DetailsPage';\n\n/**\n * The Router maps a url to a component\n */\nfunction App() {\n  return (\n    <div className=\"container-fluid remove-padding\">\n      <Router>\n        <Switch>\n          <Route path=\"/details/:imdbID\" component={DetailsPage} />\n          <Route path=\"/\" component={SearchPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}